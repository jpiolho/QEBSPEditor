@using Blazor.DownloadFileFast.Interfaces
@using QEBSPEditor.Components.BSPEditor
@using QEBSPEditor.Core
@using QEBSPEditor.Models
@using QEBSPEditor.Models.BSPFiles
@using Tewr.Blazor.FileReader
@inject DialogService DialogService
@inject IFileReaderService FileReaderService
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject ApplicationSettingsService ApplicationSettingsService

<RadzenDialog />

<PromptDialogs @ref="_dialogs" />

<RadzenLayout>
    <RadzenBody>
        @if (_bsp is not null)
        {
            <BSPEditor BSP="_bsp" />
        }
    </RadzenBody>
    <RadzenSidebar>
        <SidebarText Title="QEBSPEditor" />

        @if(_bsp is not null) {
            <SidebarText Title="Name" Text="@_bsp.Name" />

            <div class="d-flex">
                <SidebarText Title="Type" Text="@_bsp.VersionName" />
                <RadzenIcon class="pl-2" Icon="info" @onclick="() => CapabilitiesDialog.OpenAsync(DialogService, _bsp)" />
            </div>
        }

        <RadzenPanelMenu>
            <RadzenPanelMenuItemClickable Text="Load..." Icon="file_upload" Click="OpenLoadDialogAsync" />
            <RadzenPanelMenuItemClickable Text="Save" Icon="file_download" Visible="@(_bsp is not null && _bsp.Capabilities.HasFlag(BSPCapabilities.Saveable))" Click="SaveAsync" />
            <RadzenPanelMenuItemClickable Text="Settings" Icon="settings" Click="() => SettingsDialog.OpenAsync(DialogService)" />
            <RadzenPanelMenuItemClickable Text="About" Icon="contact_support" Click="() => AboutDialog.OpenAsync(DialogService)" />
        </RadzenPanelMenu>
    </RadzenSidebar>
</RadzenLayout>



@code {
    private IBSPFile? _bsp;
    private PromptDialogs? _dialogs;

    protected override async Task OnInitializedAsync()
    {
        ApplicationSettingsService.Changed += (_,_) => StateHasChanged();
        await ApplicationSettingsService.LoadAsync();
    }

    private async Task OpenLoadDialogAsync()
    {
        var bsp = await BSPLoadDialog.OpenAsync(DialogService);

        if (bsp is not null) {
            _bsp = bsp;

            if(bsp is BSPFileGeneric)
            {
                StateHasChanged();
                await _dialogs!.WarningAsync("Generic BSP loaded", "This BSP version is not supported by QEBSPEditor, however it was possible to load it as a \"Generic BSP\".\nThis is a best-effort feature and there's no guarantee of things actually working. Thread carefully.");
            }

        }
    }


    private async Task SaveAsync()
    {
        if (_bsp is null)
            throw new InvalidOperationException("No BSP loaded");

        var bsp = (IBSPSave)_bsp;
        using (var ms = new MemoryStream())
        {
            bsp.Save(ms);
            ms.Flush();
            await BlazorDownloadFileService.DownloadFileAsync("map.bsp", ms.ToArray());
        }
    }

}