@using SixLabors.ImageSharp.Formats.Png;

@if (_base64 is not null)
{
    <img src="data:image/png;base64,@_base64" style="object-fit: contain;@Style" @attributes="Attributes" />
}
else
{
    <div class="d-flex align-items-center justify-content-center" style="@Style" @attributes="Attributes">
        <Spinner />
    </div>
}

@code {
    [Parameter] public IBSPTexture? Texture { get; set; }
    [Parameter] public ColorPalette? Palette { get; set; }

    [Parameter] public string? Style { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }

    private string? _base64;
    private int _previousParameterHash;

    protected override async Task OnParametersSetAsync()
    {
        var hash = CalculateParameterHash();
        if (_previousParameterHash != hash)
        {
            // Clear previous image
            _base64 = null;
            StateHasChanged();

            // Load new image
            if (Texture != null && Palette != null)
                await Task.Run(LoadImageAsync);

            _previousParameterHash = hash;
        }
    }

    private int CalculateParameterHash()
    {
        return HashCode.Combine(Texture, Palette);
    }

    private async Task LoadImageAsync()
    {
        var data = Texture!.Data.Select(index => Palette!.GetColor(index).ToPixel<Rgb24>()).ToArray();

        using (var image = Image.LoadPixelData<Rgb24>(data, Texture.Width, Texture.Height))
        using (var ms = new MemoryStream())
        {
            image.Save(ms, new PngEncoder());
            _base64 = Convert.ToBase64String(ms.ToArray());
        }

        await Task.Yield();
    }
}
