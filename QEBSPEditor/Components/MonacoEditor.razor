@inject IJSRuntime JSRuntime
@implements IDisposable
@implements IAsyncDisposable

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col h-100">
            <div @ref="_container" class="h-100">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string?> CodeChanged { get; set; }
    [Parameter] public string? Code { get; set; }

    private ElementReference? _container;
    private DotNetObjectReference<MonacoEditor>? _selfReference;

    private IJSObjectReference? _editor;
    private IJSObjectReference? _module;

    private bool _ignoreSetCode = false;

    protected override async Task OnInitializedAsync()
    {
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/monaco.js");

        if (_container != null)
            await CreateEditorAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _module != null && _editor == null)
            await CreateEditorAsync();
    }

    private async Task CreateEditorAsync() {
        _selfReference = DotNetObjectReference.Create(this);
        _editor = await _module!.InvokeAsync<IJSObjectReference>("monacoCreate", _selfReference, _container);
    }

    protected override async Task OnParametersSetAsync()
    {
        if(_editor is not null && !_ignoreSetCode) {
            await _module!.InvokeVoidAsync("monacoSetCode", _editor, Code);
        }
    }

    public async Task SetCursorPositionAsync(int line, int col) {
        await _module!.InvokeVoidAsync("monacoSetCursor", _editor, line, col);
    }

    [JSInvokable]
    public string? JSGetCode() => Code;
    [JSInvokable]
    public async Task JSSetCode(string code) { Code = code; _ignoreSetCode = true; await CodeChanged.InvokeAsync(code); _ignoreSetCode = false; }
    [JSInvokable]
    public void JSSetEditorReference(IJSObjectReference reference) => _editor = reference;

    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (_editor is not null) {
            await _editor.InvokeVoidAsync("dispose");
            await _editor.DisposeAsync();
        }

        if(_module is not null) {
            await _module.DisposeAsync();
        }
    }

    void IDisposable.Dispose()
    {
        _selfReference?.Dispose();
    }
}