@using Tewr.Blazor.FileReader;
@inject IFileReaderService FileReaderService
@inject IJSRuntime JSRuntime

<label for="@_id" @attributes="@Attributes">@ChildContent</label>
<input @ref="_input" id="@_id" type="file" @onchange="LoadFileAsync" />


@code {
    public class FileLoadEventArgs
    {
        public required IFileInfo Info { get; init; }
        public required MemoryStream Stream { get; init; }
    }

    [Parameter] public EventCallback<FileLoadEventArgs> FileLoad { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }

    private string _id = Guid.NewGuid().ToString();
    private ElementReference _input;

    private async Task LoadFileAsync()
    {
        var file = (await FileReaderService.CreateReference(_input).EnumerateFilesAsync()).FirstOrDefault();

        if (file is null)
            return;

        var info = await file.ReadFileInfoAsync();

        using (var memoryStream = await file.CreateMemoryStreamAsync(4096))
        {
            await FileLoad.InvokeAsync(new()
                {
                    Info = info,
                    Stream = memoryStream
                });
        }

    }

    public async Task OpenAsync()
    {
        await JSRuntime.InvokeVoidAsync("clickElement", _input);
    }

}