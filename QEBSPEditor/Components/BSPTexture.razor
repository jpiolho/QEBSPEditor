@using QEBSPEditor.Core.Utilities;
@using SixLabors.ImageSharp.Formats.Bmp;
@using System.Text;
@using System.Diagnostics;
@inject BSPService BSPService

@if (AnyImage)
{
    <div class="d-inline-flex gap-2" style="@Style" @attributes="Attributes">
        @if (_base64 != null)
        {
            <img src="@_base64" class="bsp-texture w-100 h-100" />
        }
        @if (_base64_mipmap2 != null)
        {
            <img src="@_base64_mipmap2" class="bsp-texture mipmap2" />
        }
        @if (_base64_mipmap4 != null)
        {
            <img src="@_base64_mipmap4" class="bsp-texture mipmap4" />
        }
        @if (_base64_mipmap8 != null)
        {
            <img src="@_base64_mipmap8" class="bsp-texture mipmap8" />
        }
    </div>
}
else
{
    <div class="d-flex align-items-center justify-content-center" style="@Style" @attributes="Attributes">
        <Spinner />
    </div>
}

@code {
    [Flags]
    public enum TextureView
    {
        Full = 1 << 0,
        Mipmap2 = 1 << 1,
        Mipmap4 = 1 << 2,
        Mipmap8 = 1 << 3,

        AllMipmaps = Mipmap2 | Mipmap4 | Mipmap8,
        All = Full | AllMipmaps
    }

    [Parameter] public IBSPTexture? Texture { get; set; }
    [Parameter] public ColorPalette? Palette { get; set; }

    [Parameter] public int? Width { get; set; }
    [Parameter] public int? Height { get; set; }

    [Parameter] public TextureView View { get; set; } = TextureView.Full;
    [Parameter] public bool OnlyShowFullbright { get; set; }

    [Parameter] public string? Style { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? Attributes { get; set; }

    private string? _base64, _base64_mipmap2, _base64_mipmap4, _base64_mipmap8;
    private int _previousParameterHash;


    private bool AnyImage => !string.IsNullOrEmpty(_base64) ||
        !string.IsNullOrEmpty(_base64_mipmap2) ||
        !string.IsNullOrEmpty(_base64_mipmap4) ||
        !string.IsNullOrEmpty(_base64_mipmap8);

    protected override async Task OnParametersSetAsync()
    {
        var hash = CalculateParameterHash();
        if (_previousParameterHash != hash)
        {
            // Clear previous image
            _base64 = null;
            _base64_mipmap2 = null;
            _base64_mipmap4 = null;
            _base64_mipmap8 = null;

            StateHasChanged();

            // Load new image
            if (Texture != null && Palette != null)
            {
                await Task.Run(LoadImages);

                _previousParameterHash = hash;
            }
        }
    }

    private int CalculateParameterHash()
    {
        return HashCode.Combine(View, Texture, Palette, OnlyShowFullbright);
    }

    private void LoadImages()
    {
        if (Texture is null || Palette is null)
            return;

        if (View.HasFlag(TextureView.Full))
        {
            using (var image = BSPService.TextureToImage(Texture,Palette,OnlyShowFullbright,t => (t.Data,t.Width,t.Height)))
                _base64 = image.ToBase64String(BmpFormat.Instance);
        }

        if (View.HasFlag(TextureView.Mipmap2))
        {
            using (var image = BSPService.TextureToImage(Texture,Palette,OnlyShowFullbright,t => (t.Data2, t.Width / 2, t.Height / 2)))
                _base64_mipmap2 = image.ToBase64String(BmpFormat.Instance);
        }

        if (View.HasFlag(TextureView.Mipmap4))
        {
            using (var image = BSPService.TextureToImage(Texture,Palette,OnlyShowFullbright,t => (t.Data4, t.Width / 4, t.Height / 4)))
                _base64_mipmap4 = image.ToBase64String(BmpFormat.Instance);
        }

        if (View.HasFlag(TextureView.Mipmap8))
        {
            using (var image = BSPService.TextureToImage(Texture,Palette,OnlyShowFullbright,t => (t.Data8, t.Width / 8, t.Height / 8)))
                _base64_mipmap8 = image.ToBase64String(BmpFormat.Instance);
        }
    }

}
