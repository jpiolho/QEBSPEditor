@using QEBSPEditor.Components.Settings
@inject ApplicationSettingsService ApplicationSettings
@inject DialogService DialogService

<PromptDialogs @ref="_dialogs" />

<div>
    <SettingsSection Title="General">
        <SettingsBool Label="Experimetal mode" @bind-Value="_settings.ExperimentalMode" />
    </SettingsSection>
    <SettingsSection Title="Entities">
        <SettingsBool Label="Prefer source to UI" @bind-Value="_settings.EntitiesPreferSource" />
    </SettingsSection>
    <SettingsSection Title="Palettes">
        @foreach(var palette in _settings.ColorPalettes) {
            <div class="row mb-2">
                <div class="col-md">
                    <RadzenTextBox Placeholder="Name" @bind-Value="palette.Name" class="w-100" />
                </div>
                <div class="col-md">
                    <RadzenNumeric Placeholder="Fullbright start index" @bind-Value="palette.FullBrightStart" Min="0" Max="palette.FullBrightEnd" class="w-100" />
                </div>
                <div class="col-md">
                    <RadzenNumeric Placeholder="Fullbright end index"  @bind-Value="palette.FullBrightEnd" Min="palette.FullBrightStart" Max="255" class="w-100" />
                </div>
                <div class="col-md-auto">
                    <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger" Click="() => _settings.ColorPalettes.Remove(palette)" Style="width: 100px" />
                </div>
            </div>
        }

        <FileInputButton FileLoad="PaletteUploadedAsync">Add palette</FileInputButton>
    </SettingsSection>
    
    <hr/>

    <SettingsSection>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Save" Click="OnSaveClickedAsync" />
    </SettingsSection>
</div>

@code {
    private PromptDialogs _dialogs = null!;
    private ApplicationSettings _settings = null!;

    protected override void OnInitialized()
    {
        var settings = ApplicationSettings.Settings;

        _settings = new()
            {
                ExperimentalMode = settings.ExperimentalMode,
                ColorPalettes = new(settings.ColorPalettes.Select(c => (ColorPalette)c.Clone())),
            };
    }

    private async Task PaletteUploadedAsync(FileInput.FileLoadEventArgs args)
    {
        if (args.Info.Size != 256 * 3)
        {
            await _dialogs.FailureAsync("Uploaded file is not a valid palette file (.lmp)");
            return;
        }

        using var reader = new BinaryReader(args.Stream);

        var palette = new int[256];
        for (var i = 0; i < 256; i++)
        {
            byte r = reader.ReadByte();
            byte g = reader.ReadByte();
            byte b = reader.ReadByte();
            palette[i] = (r << 16) | (g << 8) | b;
        }
        _settings.ColorPalettes.Add(new ColorPalette()
            {
                Name = $"Palette {_settings.ColorPalettes.Count+1}",
                Palette = palette
            });

        StateHasChanged();
    }

    private async Task OnSaveClickedAsync()
    {
        await ApplicationSettings.SaveAsync(_settings);
        DialogService.Close();
    }

    public static async Task OpenAsync(DialogService dialogService)
    {
        await dialogService.OpenAsync<SettingsDialog>("Settings", new() { }, new() { CloseDialogOnEsc = false, ShowClose = true });
    }
}
