@using Blazor.DownloadFileFast.Interfaces
@using QEBSPEditor.Components.BSPEditor
@using QEBSPEditor.Core
@using QEBSPEditor.Models
@using QEBSPEditor.Models.BSPFiles
@using Tewr.Blazor.FileReader
@inject DialogService DialogService
@inject IFileReaderService FileReaderService
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject ApplicationSettingsService ApplicationSettingsService

<RadzenDialog />

<RadzenLayout>
    <RadzenBody>
        @if (_bsp is not null)
        {
            <BSPEditor BSP="_bsp" />
        }
    </RadzenBody>
    <RadzenSidebar>
        <div class="text-center">QEBSPEditor</div>
        <RadzenPanelMenu>
            <RadzenPanelMenuItemClickable Text="Load..." Icon="file_upload" Click="OpenLoadDialogAsync" />
            <RadzenPanelMenuItemClickable Text="Save" Icon="file_download" Visible="@(_bsp is not null)" Click="SaveAsync" />
            <RadzenPanelMenuItemClickable Text="About" Icon="contact_support" Click="() => AboutDialog.OpenAsync(DialogService)" />
        </RadzenPanelMenu>
    </RadzenSidebar>
</RadzenLayout>



@code {
    private IBSPFile? _bsp;

    protected override void OnInitialized()
    {
        ApplicationSettingsService.Changed += (_,_) => StateHasChanged();
    }

    private async Task OpenLoadDialogAsync()
    {
        var bsp = await BSPLoadDialog.OpenAsync(DialogService);

        if (bsp is not null) {
            //bsp.Entities = EntFormatter.Prettify(bsp.Entities);
            _bsp = bsp;
        }
    }

    private async Task SaveAsync()
    {
        using (var ms = new MemoryStream())
        {
            _bsp!.Save(ms);
            await BlazorDownloadFileService.DownloadFileAsync("map.bsp", ms.ToArray());
        }
    }

}